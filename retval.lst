                        ; -------------------------------------------------------------------
                        ; -------------------------------------------------------------------
                        ; *** retval: displays (and preserves) the kernel's RETVAL variable
                        ; ***
                        ; *** Build #
                        ; ***  1: Proof of concept version
                        ; *******************************************************************
                        ; *** This software is released to the public domain.		  ***
                        ; *** You have permission to use, modify, copy, and distribute	  ***
                        ; *** this software as you please.				  ***
                        ; *******************************************************************
                        ;
                        ; Register usage:
                        ;
                        ; System:
                        ;   r0   - Resesrved for DMA
                        ;   r1   - Reserved for interrupts
                        ;   r2   - Stack pointer
                        ;   r3   - Program counter
                        ;   r4   - SCALL program counter
                        ;   r5   - SRET program counter
                        ;   r6   - SCALL return address
                        ;   re.0 - SCALL overwrites with D
                        ;   re.1 - Baud rate constant
                        ;
                        ; Main program :
                        ;
                        ;   ra   - Command line pointer (on exec)
                        ;
                        ; All other registers are available for subroutines.
                        ;
                        	include	"bios.inc"
                        ; *******************************************************************
                        ; *** This software is copyright 2006 by Michael H Riley		***
                        ; *** You have permission to use, modify, copy, and distribute	***
                        ; *** this software so long as this copyright notice is retained. ***
                        ; *** This software may not be used in commercial applications	***
                        ; *** without express written permission from the author.	 ***
                        ; *******************************************************************
                        
                        ; f_getdev bit values
                        
                        b_devIDE	equ	00000001b	; IDE
                        b_devFLPY	equ	00000010b	; floppy
                        b_devBBSER	equ	00000100b	; Bit-banged serial
                        b_devUART	equ	00001000b	; UART
                        b_devRTC	equ	00010000b	; RTC
                        b_devNVR	equ	00100000b	; NVRAM
                        
                        #ifndef _IS_BIOS
                        
                        ; Define address for standard BIOS vectors
                        BIOS	equ	0ff00h
                        
                        ; Define address for extended BIOS vectors
                        EBIOS	equ	0f800h
                        
                        scall	equ	r4			; register for SCALL
                        sret	equ	r5			; register for SRET
                        
                        f_boot		equ	(BIOS+00h)	; boot from ide device
                        f_type		equ	(BIOS+03h)	; type 1 character to console
                        f_read		equ	(BIOS+06h)	; read 1 character from console
                        f_msg		equ	(BIOS+09h)	; type asciiz string to console
                        f_typex		equ	(BIOS+0ch)	; depricated, just returns now
                        f_input		equ	(BIOS+0fh)	; read asciiz from console
                        f_strcmp	equ	(BIOS+12h)	; compare 2 strings
                        f_ltrim		equ	(BIOS+15h)	; trim leading spaces
                        f_strcpy	equ	(BIOS+18h)	; copy an asciiz string
                        f_memcpy	equ	(BIOS+1bh)	; copy memory
                        f_wrtsec	equ	(BIOS+1eh)	; write floppy sector (depricated)
                        f_rdsec		equ	(BIOS+21h)	; read floppy sector (depricated)
                        f_seek0		equ	(BIOS+24h)	; floppy seek to track 0 (depricated)
                        f_seek		equ	(BIOS+27h)	; floopy track seek (depricated)
                        f_drive		equ	(BIOS+2ah)	; select floppy drive (depricated)
                        f_setbd		equ	(BIOS+2dh)	; set console baud rate
                        f_mul16		equ	(BIOS+30h)	; 16-bit multiply
                        f_div16		equ	(BIOS+33h)	; 16-bit division
                        f_idereset	equ	(BIOS+36h)	; reset ide device
                        f_idewrite	equ	(BIOS+39h)	; write ide sector
                        f_ideread	equ	(BIOS+3ch)	; read ide sector
                        f_initcall	equ	(BIOS+3fh)	; initialize R4 and R5
                        f_bootide	equ	(BIOS+42h)	; boot from ide device
                        f_hexin		equ	(BIOS+45h)	; convert ascii number to hex
                        f_hexout2	equ	(BIOS+48h)	; convert hex to 2-digit ascii
                        f_hexout4	equ	(BIOS+4bh)	; convert hex to 4-digit ascii
                        f_tty		equ	(BIOS+4eh)	; type character to console
                        f_mover		equ	(BIOS+51h)	; program relocator
                        f_minimon	equ	(BIOS+54h)	; mini monitor
                        f_freemem	equ	(BIOS+57h)	; determine memory size
                        f_isnum		equ	(BIOS+5ah)	; determine if D is numeric
                        f_atoi		equ	(BIOS+5dh)	; convert ascii to integer
                        f_uintout	equ	(BIOS+60h)	; convert unsigned integer to ascii
                        f_intout	equ	(BIOS+63h)	; convert signed integer to ascii
                        f_inmsg		equ	(BIOS+66h)	; type in-line message
                        f_inputl	equ	(BIOS+69h)	; read limited line from console
                        f_brktest	equ	(BIOS+6ch)	; check for serial break
                        f_findtkn	equ	(BIOS+6fh)	; find token in a token table
                        f_isalpha	equ	(BIOS+72h)	; determine if D is alphabetic
                        f_ishex		equ	(BIOS+75h)	; determine if D is hexadecimal
                        f_isalnum	equ	(BIOS+78h)	; determine if D is alpha or numeric
                        f_idnum		equ	(BIOS+7bh)	; determine type of ascii number
                        f_isterm	equ	(BIOS+7eh)	; determine if D is a termination char
                        f_getdev	equ	(BIOS+81h)	; get supported devices
                        
                        f_version	equ	(BIOS+0f9h)	; 3 bytes holding bios version number
                        
                        ; "Extended" BIOS vectors
                        
                        f_bread		equ	(EBIOS+00h)	; read from onboard serial port
                        f_btype		equ	(EBIOS+03h)	; write to onboard serial port
                        f_btest		equ	(EBIOS+06h)	; test onboard serial port
                        f_utype		equ	(EBIOS+09h)	; write to disk board UART
                        f_uread		equ	(EBIOS+0ch)	; read from disk board UART
                        f_utest		equ	(EBIOS+0fh)	; test disk board UART
                        f_usetbd	equ	(EBIOS+12h)	; set disk board UART baud rate and format
                        f_gettod	equ	(EBIOS+15h)	; read time of day clock
                        f_settod	equ	(EBIOS+18h)	; set time of day clock
                        f_rdnvr		equ	(EBIOS+1bh)	; read non volatile RAM
                        f_wrnvr		equ	(EBIOS+1eh)	; write non volatile RAM
                        f_idesize	equ	(EBIOS+21h)	; return size of attached IDE drive(s)
                        f_ideid		equ	(EBIOS+24h)	; return device data for IDE drive(s)
                        f_tmtoas	equ	(EBIOS+2ah)	; time to ASCII string
                        f_dttoas	equ	(EBIOS+27h)	; date to ASCII string
                        f_rtctest	equ	(EBIOS+2dh)	; test size and presence of RTC/NVR
                        f_astodt	equ	(EBIOS+30h)	; convert ASCII string to date
                        f_astotm	equ	(EBIOS+33h)	; convert ASCII string to time
                        f_nvrcchk	equ	(EBIOS+36h)	; compute NVR checksum
                        
                        #endif
                        
                        	include	"kernel.inc"
                        O_CLDBOOT: equ     0300h               ; jump to cold boot routine
                        O_WRMBOOT: equ     0303h               ; jump to warm boot routine
                        O_OPEN:    equ     0306h               ; open a file
                        O_READ:    equ     0309h               ; read from file
                        O_WRITE:   equ     030ch               ; write to file
                        O_SEEK:    equ     030fh               ; seek to file position
                        O_CLOSE:   equ     0312h               ; close file
                        O_OPENDIR: equ     0315h               ; open dir as a file
                        O_DELETE:  equ     0318h               ; delete a file
                        O_RENAME:  equ     031bh               ; rename a file
                        O_EXEC:    equ     031eh               ; execute an external program
                        O_MKDIR:   equ     0321h               ; make directory
                        O_CHDIR:   equ     0324h               ; change directory
                        O_RMDIR:   equ     0327h               ; remove directory
                        O_RDLUMP:  equ     032Ah               ; read LAT entry
                        O_WRLUMP:  equ     032Dh               ; write LAT entry
                        O_TYPE:    equ     0330h               ; passthrough for console output
                        O_MSG:     equ     0333h               ; passthrough for console output
                        O_READKEY: equ     0336h               ; passthrough for console input
                        O_INPUT:   equ     0339h               ; passthrough for console input
                        O_PRTSTAT: equ     033ch               ; printer status
                        O_PRINT:   equ     033fh               ; output to printer
                        O_EXECBIN: equ     0342h               ; execute from default directory
                        O_SETDEF:  equ     0345h               ; set/get default directory
                        O_KINIT:   equ     0348h               ; reserved - do not use!!!
                        O_INMSG:   equ     034bh               ; passthrough for console output
                        O_GETDEV:  equ     034eh               ; passthrough to f_getdef
                        O_GETTOD:  equ     0351h               ; passthrough to f_gettod
                        O_SETTOD:  equ     0354h               ; passthrough to f_settod
                        O_INPUTL:  equ     0357h               ; passthrough to f_inputl
                        O_BOOT:    equ     035ah               ; passthrough to f_boot
                        O_SETBD:   equ     0360h               ; passthrough to f_setbd
                        O_INITCALL: equ    0363h               ; passthrough to f_initcall
                        O_BRKTEST: equ     0366h               ; passthrough to f_brktest
                        O_DEVCTRL: equ     0369h               ; Hook for device control drivers
                        O_ALLOC:   equ     036ch               ; passthrough to alloc
                        O_DEALLOC: equ     036fh               ; passthrough to dealloc
                        O_TERMCTRL: equ    0372h               ; Hook for terminal control drivers
                        O_MEMCTRL: equ     0375h               ; Hook for memory control drivers
                        I_SERVE:   equ     03f6h               ; address of interrupt chain head
                        V_IVEC:    equ     03fdh               ; interrupt head
                        V_DVEC:    equ     036ah               ; device head
                        K_VER:     equ     0400h               ; kernel version number
                        K_BUILD:   equ     0403h               ; kernel build number
                        K_BMONTH:  equ     0405h               ; kernel build month
                        K_BDAY:    equ     0406h               ; kernel build day
                        K_BYEAR:   equ     0407h               ; kernel build month
                        K_HIMEM:   equ     0442h               ; high memory pointer
                        K_LOWMEM:  equ     0465h               ; lowest memory heap can use
                        K_RETVAL:  equ     0467h               ; D on program exit
                        K_HEAP:    equ     0468h               ; heap pointer
                        K_CLKFREQ: equ     0470h               ; system clock frequency
                        K_MONTH:   equ     0475h               ; date/time
                        K_DAY:     equ     0476h
                        K_YEAR:    equ     0477h
                        K_HOUR:    equ     0478h
                        K_MINUTE:  equ     0479h
                        K_SECOND:  equ     047ah
                        K_SECDEN:  equ     047bh
                        K_SECNUM:  equ     047dh
                        ;
                        ;O_HIMEM:   equ     0442h               ; himem value
                        O_DATTIM:  equ     0475h               ; date/time block
                        ;
                        errexists: equ     1
                        errnoffnd: equ     2
                        errinvdir: equ     3
                        errisdir:  equ     4
                        errdirnotempty: equ   5
                        errnotexec:     equ   6
                        ;
                        O_CREAT	equ	00000001b
                        O_TRUNC	equ	00000010b
                        O_APPND	equ	00000100b
                        
                        ;
                        ; ***************************************************
                        ; ***** Constants				*****
                        ; ***************************************************
                        cr	equ	'M'-'@'
                        lf	equ	'J'-'@'
                        MIN_BLD	equ	300
                        ;
                        ; ***************************************************
                        ; ***** This block is the Execution header for	*****
                        ; ***** a stand-alone program. It begins 6	*****
                        ; *****bytes before the program start.		*****
                        ; ***************************************************
                        LoadAdr	equ	2000h
                        	org	LoadAdr-6	; Header starts at 01ffah
   1ffa   20 00         	dw	LoadAdr
   1ffc   00 ac         	dw	EndRom-LoadAdr
   1ffe   20 00         	dw	LoadAdr
                        ;
                        ; ***************************************************
                        ; ***** Code start				*****
                        ; ***************************************************
   2000   30 1f         	br	Start
                        ;
                        ; ***************************************************
                        ; ***** Program header				*****
                        ; ***************************************************
   2002   88 01 07 e5   	date
   2006   00 01         Build:	dw	1		; build number
   2008   70 72 6f 6f   	db	'proof of concept build',0
   200c   66 20 6f 66   
   2010   20 63 6f 6e   
   2014   63 65 70 74   
   2018   20 62 75 69   
   201c   6c 64 00      
                        ;
                        ; ***************************************************
                        ; ***** Main program				*****
                        ; ***************************************************
                        start:	
   201f   f8 04 bf f8   	load	rf,K_VER	; check for minimum kernel version
   2023   00 af         
   2025   4f            	lda	rf		; of 0.4.0
   2026   3a 7a         	bnz	kernel_ok
   2028   4f            	lda	rf
   2029   ff 04         	smi	4
   202b   3b 3c         	bnf	kernel_old
   202d   3a 7a         	bnz	kernel_ok
   202f   4f            	lda	rf
   2030   3a 7a         	bnz	kernel_ok
   2032   1f            	inc	rf		; build to LSB of build
   2033   0f            	ldn	rf
   2034   ff 2c         	smi	low MIN_BLD	; check for minimum build o
   2036   2f            	dec	rf
   2037   0f            	ldn	rf
   2038   7f 01         	smbi	high MIN_BLD
   203a   33 7a         	bdf	kernel_ok
                        kernel_old:
   203c   d4 03 4b      	call	O_INMSG
   203f   45 52 52 4f   	db	'ERROR: needs kernel version 0.4.0 (build 300) or higher',cr,lf,0
   2043   52 3a 20 6e   
   2047   65 65 64 73   
   204b   20 6b 65 72   
   204f   6e 65 6c 20   
   2053   76 65 72 73   
   2057   69 6f 6e 20   
   205b   30 2e 34 2e   
   205f   30 20 28 62   
   2063   75 69 6c 64   
   2067   20 33 30 30   
   206b   29 20 6f 72   
   206f   20 68 69 67   
   2073   68 65 72 0d   
   2077   0a 00         
   2079   d5            	retn
                        kernel_ok:
   207a   f8 04 bc f8   	load	rc,K_RETVAL
   207e   67 ac         
   2080   f8 20 bf f8   	load	rf,buf
   2084   a4 af         
   2086   0c            	ldn	rc		; retrieve the previous program's
   2087   ad            	plo	rd		; return value
   2088   f8 00         	ldi	0
   208a   bd            	phi	rd
   208b   d4 ff 60      	call	f_uintout	; convert to decimal ASCII number
   208e   f8 0d         	ldi	cr		; add cr/lf
   2090   5f            	str	rf
   2091   1f            	inc	rf
   2092   f8 0a         	ldi	lf
   2094   5f            	str	rf
   2095   1f            	inc	rf
   2096   f8 00         	ldi	0
   2098   5f            	str	rf
   2099   f8 20 bf f8   	load	rf,buf
   209d   a4 af         
   209f   d4 03 33      	call	O_MSG		; display it
   20a2   0c            	ldn	rc		; retrieve old RETVAL and
   20a3   d5            	retn			; return to Elf/OS
                        buf:	ds	8
                        EndRom	equ	$
                        	end
0004  b_devBBSER    0002  b_devFLPY     0001  b_devIDE      0020  b_devNVR  
0010  b_devRTC      0008  b_devUART     ff00  BIOS          20a4  buf       
2006  Build         000d  cr            f800  EBIOS         20ac  EndRom    
0005  errdirnotempty    0001  errexists     0003  errinvdir     0004  errisdir  
0002  errnoffnd     0006  errnotexec    f830  f_astodt      f833  f_astotm  
ff5d  f_atoi        ff00  f_boot        ff42  f_bootide     f800  f_bread   
ff6c  f_brktest     f806  f_btest       f803  f_btype       ff33  f_div16   
ff2a  f_drive       f827  f_dttoas      ff6f  f_findtkn     ff57  f_freemem 
ff81  f_getdev      f815  f_gettod      ff45  f_hexin       ff48  f_hexout2 
ff4b  f_hexout4     f824  f_ideid       ff3c  f_ideread     ff36  f_idereset
f821  f_idesize     ff39  f_idewrite    ff7b  f_idnum       ff3f  f_initcall
ff66  f_inmsg       ff0f  f_input       ff69  f_inputl      ff63  f_intout  
ff78  f_isalnum     ff72  f_isalpha     ff75  f_ishex       ff5a  f_isnum   
ff7e  f_isterm      ff15  f_ltrim       ff1b  f_memcpy      ff54  f_minimon 
ff51  f_mover       ff09  f_msg         ff30  f_mul16       f836  f_nvrcchk 
f81b  f_rdnvr       ff21  f_rdsec       ff06  f_read        f82d  f_rtctest 
ff27  f_seek        ff24  f_seek0       ff2d  f_setbd       f818  f_settod  
ff12  f_strcmp      ff18  f_strcpy      f82a  f_tmtoas      ff4e  f_tty     
ff03  f_type        ff0c  f_typex       ff60  f_uintout     f80c  f_uread   
f812  f_usetbd      f80f  f_utest       f809  f_utype       fff9  f_version 
f81e  f_wrnvr       ff1e  f_wrtsec      03f6  I_SERVE       0406  K_BDAY    
0405  K_BMONTH      0403  K_BUILD       0407  K_BYEAR       0470  K_CLKFREQ 
0476  K_DAY         0468  K_HEAP        0442  K_HIMEM       0478  K_HOUR    
0465  K_LOWMEM      0479  K_MINUTE      0475  K_MONTH       0467  K_RETVAL  
047b  K_SECDEN      047d  K_SECNUM      047a  K_SECOND      0400  K_VER     
0477  K_YEAR        207a  kernel_ok     203c  kernel_old    000a  lf        
2000  LoadAdr       012c  MIN_BLD       036c  O_ALLOC       0004  O_APPND   
035a  O_BOOT        0366  O_BRKTEST     0324  O_CHDIR       0300  O_CLDBOOT 
0312  O_CLOSE       0001  O_CREAT       0475  O_DATTIM      036f  O_DEALLOC 
0318  O_DELETE      0369  O_DEVCTRL     031e  O_EXEC        0342  O_EXECBIN 
034e  O_GETDEV      0351  O_GETTOD      0363  O_INITCALL    034b  O_INMSG   
0339  O_INPUT       0357  O_INPUTL      0348  O_KINIT       0375  O_MEMCTRL 
0321  O_MKDIR       0333  O_MSG         0306  O_OPEN        0315  O_OPENDIR 
033f  O_PRINT       033c  O_PRTSTAT     032a  O_RDLUMP      0309  O_READ    
0336  O_READKEY     031b  O_RENAME      0327  O_RMDIR       030f  O_SEEK    
0360  O_SETBD       0345  O_SETDEF      0354  O_SETTOD      0372  O_TERMCTRL
0002  O_TRUNC       0330  O_TYPE        030c  O_WRITE       032d  O_WRLUMP  
0303  O_WRMBOOT     0000  r0            0001  r1            000a  r10       
000b  r11           000c  r12           000d  r13           000e  r14       
000f  r15           0002  r2            0003  r3            0004  r4        
0005  r5            0006  r6            0007  r7            0008  r8        
0009  r9            000a  ra            000b  rb            000c  rc        
000d  rd            000e  re            000f  rf            0004  scall     
0005  sret          201f  start         036a  V_DVEC        03fd  V_IVEC    
